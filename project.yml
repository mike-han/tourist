title: "Detecting fashion brands in online comments (Named Entity Recognition)"
description: "This project uses [`sense2vec`](https://github.com/explosion/sense2vec) and [Prodigy](https://prodi.gy) to bootstrap an NER model to detect fashion brands in [Reddit comments](https://files.pushshift.io/reddit/comments/). For more details, see [our blog post](https://explosion.ai/blog/sense2vec-reloaded#annotation)."
# Variables can be referenced across the project.yml using ${vars.var_name}
vars:
  config: "config.cfg"
  name: "ner_project"
  version: "0.0.1"
  source: "project_raw"
  train: "project_training"
  dev: "project_eval"
  patterns: "widget_patterns"

# These are the directories that the project needs. The project CLI will make
# sure that they always exist.
directories: ["assets", "training", "configs", "scripts", "corpus", "packages"]

# Assets that should be downloaded or available in the directory. We're shipping
# them with the project, so they won't have to be downloaded. But the
# 'project assets' command still lets you verify that the checksums match.
assets:
  # - dest: "assets/${vars.source}.json"
  #   git:
  #     repo: 'https://github.com/mike-han/cyanbird/'
  #     branch: 'main'
  #     path: 'data/project_raw.json'
  #   description: "JSON-formatted training data exported from cyanbird"
  - dest: "assets/${vars.source}.json"
    description: "JSON-formatted training data exported from cyanbird"
  # Patterns are not used for training but we distribute them for reference
  - dest: "assets/${vars.patterns}.jsonl"
    description: "Patterns file generated by the iwdgte label of the project"

# Workflows are sequences of commands (see below) executed in order. You can
# run them via "spacy project run [workflow]". If a commands's inputs/outputs
# haven't changed, it won't be re-run.
workflows:
  all:
    - install
    - preprocess
    - augment
    - train
    - evaluate
    - package
    - visualize-model

# Project commands, specified in a style similar to CI config files (e.g. Azure
# pipelines). The name is the command name that lets you trigger the command
# via "spacy project run [command] [path]". The help message is optional and
# shown when executing "spacy project run [optional command] [path] --help".
commands:

  - name: "install"
    help: "Install dependencies"
    script: 
      - "pipenv install"
      # - "python -m spacy download en_core_web_md"

  - name: "preprocess"
    help: "Convert raw inputs into spaCy's binary format"
    script:
      - "python scripts/preprocess.py assets/${vars.source}.json corpus/${vars.source}.spacy"
    deps:
      - assets/${vars.source}.json
      - "scripts/preprocess.py"
    outputs:
      - corpus/${vars.source}.spacy

  - name: "augment"
    help: "Convert the data to spaCy's binary format"
    script:
      - "python scripts/augment.py corpus/${vars.source}.spacy corpus/${vars.train}.spacy corpus/${vars.dev}.spacy"
    deps:
      - "corpus/${vars.source}.spacy"
      - "scripts/augment.py"
    outputs:
      - "corpus/${vars.train}.spacy"
      - "corpus/${vars.dev}.spacy"

  - name: "train"
    help: "Train a named entity recognition model"
    script:
      - "python -m spacy train configs/${vars.config} --output training/ --paths.train corpus/${vars.train}.spacy --paths.dev corpus/${vars.dev}.spacy"
    deps:
      - "corpus/${vars.train}.spacy"
      - "corpus/${vars.dev}.spacy"
    outputs:
      - "training/model-best"

  - name: "evaluate"
    help: "Evaluate the model and export metrics"
    script:
      - "python -m spacy evaluate training/model-best corpus/${vars.dev}.spacy --output training/metrics.json"
    deps:
      - "corpus/${vars.dev}.spacy"
      - "training/model-best"
    outputs:
      - "training/metrics.json"

  - name: package
    help: "Package the trained model so it can be installed"
    script:
      - "python -m spacy package training/model-best packages --name ${vars.name} --version ${vars.version} --force"
    deps:
      - "training/model-best"
    outputs_no_cache:
      - "packages/en_${vars.name}-${vars.version}/dist/en_${vars.name}-${vars.version}.tar.gz"

  - name: visualize-model
    help: Visualize the model's output interactively using Streamlit
    script:
      - "streamlit run scripts/visualize_model.py training/model-best \"I have set up an Edit widget in my Experience Builder app. Before the user selects a feature to edit, the widget displays a title at the top, which is taken from the name I have given the widget. I have set up an Chart widget in my Experience Builder app. I have set up an Card widget in my Experience Builder app.\""
    deps:
      - "scripts/visualize_model.py"
      - "training/model-best"
